{"ast":null,"code":"import _objectSpread from \"/Users/tristangruener/Desktop/trstn/dev/cashflow_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/tristangruener/Desktop/trstn/dev/cashflow_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React from 'react'; //custom hook\n\nfunction useFormValidation(initialState, validate, authenticate) {\n  //values set here on setValues using the initial state from dashboard component\n  const _React$useState = React.useState(initialState),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        values = _React$useState2[0],\n        setValues = _React$useState2[1];\n\n  const _React$useState3 = React.useState({}),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        errors = _React$useState4[0],\n        setErrors = _React$useState4[1];\n\n  const _React$useState5 = React.useState(false),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        isSubmitting = _React$useState6[0],\n        setSubmitting = _React$useState6[1]; //useEffect hook is there to check if state has changed!\n  //so ok, the callback seems to only run by watching the errors state it looks like\n\n\n  React.useEffect(() => {\n    if (isSubmitting) {\n      const noErrors = Object.keys(errors).length === 0;\n\n      if (noErrors) {\n        // console.log('authenticate', values)\n        authenticate();\n        setSubmitting(false);\n      } else {\n        setSubmitting(false);\n      }\n    }\n  }, [errors]); //alright so it looks like we are just reducing the number of times we would handleChange and keeping it in the reusable hook\n  //that's pretty cool!\n\n  function handleChange(event) {\n    event.persist();\n    setValues(previousValues => _objectSpread({}, previousValues, {\n      [event.target.name]: event.target.value\n    }));\n  }\n\n  function handleBlur() {\n    const validationErrors = validate(values);\n    setErrors(validationErrors);\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault(); // console.log(event.target.values)\n\n    console.log('in handle submit');\n    const validationErrors = validate(values);\n    setErrors(validationErrors);\n    setSubmitting(true); //so it seems like right after this function runs, that's when you would clear the data, right?\n    // setValues('')\n  }\n\n  return {\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    values,\n    errors,\n    isSubmitting\n  };\n}\n\nexport default useFormValidation;","map":{"version":3,"sources":["/Users/tristangruener/Desktop/trstn/dev/cashflow_app/src/components/auth/useFormValidation.js"],"names":["React","useFormValidation","initialState","validate","authenticate","useState","values","setValues","errors","setErrors","isSubmitting","setSubmitting","useEffect","noErrors","Object","keys","length","handleChange","event","persist","previousValues","target","name","value","handleBlur","validationErrors","handleSubmit","preventDefault","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AAEA,SAASC,iBAAT,CAA2BC,YAA3B,EAAyCC,QAAzC,EAAmDC,YAAnD,EAAiE;AAC/D;AAD+D,0BAEnCJ,KAAK,CAACK,QAAN,CAAeH,YAAf,CAFmC;AAAA;AAAA,QAExDI,MAFwD;AAAA,QAEhDC,SAFgD;;AAAA,2BAGnCP,KAAK,CAACK,QAAN,CAAe,EAAf,CAHmC;AAAA;AAAA,QAGxDG,MAHwD;AAAA,QAGhDC,SAHgD;;AAAA,2BAIzBT,KAAK,CAACK,QAAN,CAAe,KAAf,CAJyB;AAAA;AAAA,QAIxDK,YAJwD;AAAA,QAI1CC,aAJ0C,wBAM/D;AACA;;;AAEAX,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,QAAGF,YAAH,EAAiB;AACf,YAAMG,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYP,MAAZ,EAAoBQ,MAApB,KAA+B,CAAhD;;AACA,UAAIH,QAAJ,EAAc;AACZ;AACAT,QAAAA,YAAY;AACZO,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD,OAJD,MAIO;AACLA,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF;AACF,GAXD,EAWG,CAACH,MAAD,CAXH,EAT+D,CAuB/D;AACA;;AACA,WAASS,YAAT,CAAsBC,KAAtB,EAA6B;AAC3BA,IAAAA,KAAK,CAACC,OAAN;AACAZ,IAAAA,SAAS,CAACa,cAAc,sBACnBA,cADmB;AAEtB,OAACF,KAAK,CAACG,MAAN,CAAaC,IAAd,GAAqBJ,KAAK,CAACG,MAAN,CAAaE;AAFZ,MAAf,CAAT;AAID;;AAED,WAASC,UAAT,GAAsB;AACpB,UAAMC,gBAAgB,GAAGtB,QAAQ,CAACG,MAAD,CAAjC;AACAG,IAAAA,SAAS,CAACgB,gBAAD,CAAT;AACD;;AAED,WAASC,YAAT,CAAsBR,KAAtB,EAA6B;AAC3BA,IAAAA,KAAK,CAACS,cAAN,GAD2B,CAE3B;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,UAAMJ,gBAAgB,GAAGtB,QAAQ,CAACG,MAAD,CAAjC;AACAG,IAAAA,SAAS,CAACgB,gBAAD,CAAT;AACAd,IAAAA,aAAa,CAAC,IAAD,CAAb,CAN2B,CAO3B;AACA;AAED;;AAED,SAAO;AAAEM,IAAAA,YAAF;AAAgBO,IAAAA,UAAhB;AAA4BE,IAAAA,YAA5B;AAA0CpB,IAAAA,MAA1C;AAAkDE,IAAAA,MAAlD;AAA0DE,IAAAA;AAA1D,GAAP;AACD;;AAED,eAAeT,iBAAf","sourcesContent":["import React from 'react'\n\n//custom hook\n\nfunction useFormValidation(initialState, validate, authenticate) {\n  //values set here on setValues using the initial state from dashboard component\n  const [values, setValues] = React.useState(initialState)\n  const [errors, setErrors] = React.useState({})\n  const [isSubmitting, setSubmitting] = React.useState(false)\n\n  //useEffect hook is there to check if state has changed!\n  //so ok, the callback seems to only run by watching the errors state it looks like\n\n  React.useEffect(() => {\n    if(isSubmitting) {\n      const noErrors = Object.keys(errors).length === 0\n      if (noErrors) {\n        // console.log('authenticate', values)\n        authenticate()\n        setSubmitting(false)\n      } else {\n        setSubmitting(false)\n      }\n    }\n  }, [errors])\n\n\n  //alright so it looks like we are just reducing the number of times we would handleChange and keeping it in the reusable hook\n  //that's pretty cool!\n  function handleChange(event) {\n    event.persist()\n    setValues(previousValues => ({\n      ...previousValues,\n      [event.target.name]: event.target.value,\n    }))\n  }\n\n  function handleBlur() {\n    const validationErrors = validate(values)\n    setErrors(validationErrors)\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault()\n    // console.log(event.target.values)\n    console.log('in handle submit')\n    const validationErrors = validate(values)\n    setErrors(validationErrors)\n    setSubmitting(true)\n    //so it seems like right after this function runs, that's when you would clear the data, right?\n    // setValues('')\n\n  }\n\n  return { handleChange, handleBlur, handleSubmit, values, errors, isSubmitting }\n}\n\nexport default useFormValidation\n"]},"metadata":{},"sourceType":"module"}