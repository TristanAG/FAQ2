{"ast":null,"code":"import _objectSpread from \"/Users/tristangruener/Desktop/trstn/dev/cashflow_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/tristangruener/Desktop/trstn/dev/cashflow_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tristangruener/Desktop/trstn/dev/cashflow_app/src/components/Expenses.js\";\nimport React from 'react';\nimport FirebaseContext from '../firebase/context';\nimport Expense from './Expense';\n\nfunction Expenses() {\n  const _React$useContext = React.useContext(FirebaseContext),\n        firebase = _React$useContext.firebase,\n        user = _React$useContext.user;\n\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        expenses = _React$useState2[0],\n        setExpenses = _React$useState2[1]; //something about this empty array as a dependency lets it hook into the\n  //onMount or soemthing?\n\n\n  React.useEffect(() => {\n    const unsubscribe = getExpenses();\n  }, []);\n\n  function getExpenses() {\n    firebase.db.collection('expenses').orderBy('created', 'desc').onSnapshot(handleSnapshot);\n  }\n\n  function handleSnapshot(snapshot) {\n    const expenses = snapshot.docs.map(doc => {\n      return _objectSpread({\n        id: doc.id\n      }, doc.data());\n    });\n    setExpenses(expenses);\n  } //ok, so can i determine who the logged in user is here? of course i can\n  //how do i do that\n\n\n  console.log(user && user.uid); //so i think i can get all expenses by user id... from the snapshot above\n  //instead of handling all, i can just \n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"expenses-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, expenses.map((expense, index) => React.createElement(Expense, {\n    key: expense.id,\n    expense: expense,\n    index: index + 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }))));\n}\n\nexport default Expenses;","map":{"version":3,"sources":["/Users/tristangruener/Desktop/trstn/dev/cashflow_app/src/components/Expenses.js"],"names":["React","FirebaseContext","Expense","Expenses","useContext","firebase","user","useState","expenses","setExpenses","useEffect","unsubscribe","getExpenses","db","collection","orderBy","onSnapshot","handleSnapshot","snapshot","docs","map","doc","id","data","console","log","uid","expense","index"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,qBAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAGA,SAASC,QAAT,GAAoB;AAAA,4BACSH,KAAK,CAACI,UAAN,CAAiBH,eAAjB,CADT;AAAA,QACVI,QADU,qBACVA,QADU;AAAA,QACAC,IADA,qBACAA,IADA;;AAAA,0BAEcN,KAAK,CAACO,QAAN,CAAe,EAAf,CAFd;AAAA;AAAA,QAEXC,QAFW;AAAA,QAEDC,WAFC,wBAIlB;AACA;;;AACAT,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AACpB,UAAMC,WAAW,GAAGC,WAAW,EAA/B;AACD,GAFD,EAEG,EAFH;;AAIA,WAASA,WAAT,GAAuB;AACrBP,IAAAA,QAAQ,CAACQ,EAAT,CACGC,UADH,CACc,UADd,EAEGC,OAFH,CAEW,SAFX,EAEsB,MAFtB,EAGGC,UAHH,CAGcC,cAHd;AAID;;AAED,WAASA,cAAT,CAAwBC,QAAxB,EAAkC;AAChC,UAAMV,QAAQ,GAAGU,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkBC,GAAG,IAAI;AACxC;AAASC,QAAAA,EAAE,EAAED,GAAG,CAACC;AAAjB,SAAwBD,GAAG,CAACE,IAAJ,EAAxB;AACD,KAFgB,CAAjB;AAGAd,IAAAA,WAAW,CAACD,QAAD,CAAX;AACD,GAtBiB,CAwBlB;AACA;;;AACAgB,EAAAA,OAAO,CAACC,GAAR,CAAYnB,IAAI,IAAIA,IAAI,CAACoB,GAAzB,EA1BkB,CA2BlB;AACA;;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGlB,QAAQ,CAACY,GAAT,CAAa,CAACO,OAAD,EAAUC,KAAV,KACZ,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAED,OAAO,CAACL,EAAtB;AAA0B,IAAA,OAAO,EAAEK,OAAnC;AAA4C,IAAA,KAAK,EAAEC,KAAK,GAAG,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CAFJ,CADF;AAWD;;AAED,eAAezB,QAAf","sourcesContent":["import React from 'react'\nimport FirebaseContext from '../firebase/context'\nimport Expense from './Expense'\n\n\nfunction Expenses() {\n  const { firebase, user } = React.useContext(FirebaseContext)\n  const [expenses, setExpenses] = React.useState([])\n\n  //something about this empty array as a dependency lets it hook into the\n  //onMount or soemthing?\n  React.useEffect(() => {\n    const unsubscribe = getExpenses()\n  }, [])\n\n  function getExpenses() {\n    firebase.db\n      .collection('expenses')\n      .orderBy('created', 'desc')\n      .onSnapshot(handleSnapshot)\n  }\n\n  function handleSnapshot(snapshot) {\n    const expenses = snapshot.docs.map(doc => {\n      return { id: doc.id, ...doc.data() }\n    })\n    setExpenses(expenses)\n  }\n\n  //ok, so can i determine who the logged in user is here? of course i can\n  //how do i do that\n  console.log(user && user.uid)\n  //so i think i can get all expenses by user id... from the snapshot above\n  //instead of handling all, i can just \n\n  return (\n    <div>\n      {/* {postedByAuthUser && */}\n        <div className=\"expenses-list\">\n          {expenses.map((expense, index) => (\n            <Expense key={expense.id} expense={expense} index={index + 1} />\n          ))}\n        </div>\n      {/* } */}\n    </div>\n  )\n}\n\nexport default Expenses\n"]},"metadata":{},"sourceType":"module"}