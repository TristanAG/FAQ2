{"ast":null,"code":"import _objectSpread from \"/Users/tristangruener/Desktop/trstn/dev/cashflow_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/tristangruener/Desktop/trstn/dev/cashflow_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tristangruener/Desktop/trstn/dev/cashflow_app/src/components/Expenses.js\";\nimport React from 'react';\nimport FirebaseContext from '../firebase/context';\nimport Expense from './Expense';\nimport moment from 'moment';\n\nfunction Expenses() {\n  const _React$useContext = React.useContext(FirebaseContext),\n        firebase = _React$useContext.firebase,\n        user = _React$useContext.user;\n\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        expenses = _React$useState2[0],\n        setExpenses = _React$useState2[1];\n\n  const _React$useState3 = React.useState([]),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        total = _React$useState4[0],\n        setTotal = _React$useState4[1]; //use effect hook has its dependency, which is like the didComponentUpdate() lifecycle. so basically, it's dependency is the 'user' variable\n  //this variable first has a state of null, so therefore, we only execute the function / unsubscribe if use is not null (is present)\n  //pretty cool! learned something for sure here...\n\n\n  React.useEffect(() => {\n    if (user) {\n      const unsubscribe = getExpenses();\n    }\n  }, [user]);\n\n  function getExpenses() {\n    //config\n    //get current month\n    const month = moment(Date.now()).format('MMMM');\n    console.log(month);\n    firebase.db.collection('expenses').where(\"postedBy.id\", \"==\", user.uid).where(\"monthCreated\", \"==\", \"November\").orderBy('created', 'desc').onSnapshot(handleSnapshot);\n  }\n\n  function handleSnapshot(snapshot) {\n    const expenses = snapshot.docs.map(doc => {\n      return _objectSpread({\n        id: doc.id\n      }, doc.data());\n    });\n    setExpenses(expenses);\n    getTotal(expenses);\n  } //haha, it's not very pretty, but it works!\n\n\n  function getTotal(expenses) {\n    let total = 0;\n    expenses.map(exp => {\n      const num = parseInt(exp.amount);\n      total += num;\n    });\n    setTotal(total);\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"total:\"), \" \", total), React.createElement(\"div\", {\n    className: \"expenses-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, expenses.map((expense, index) => React.createElement(Expense, {\n    key: expense.id,\n    expense: expense,\n    index: index + 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }))));\n}\n\nexport default Expenses;","map":{"version":3,"sources":["/Users/tristangruener/Desktop/trstn/dev/cashflow_app/src/components/Expenses.js"],"names":["React","FirebaseContext","Expense","moment","Expenses","useContext","firebase","user","useState","expenses","setExpenses","total","setTotal","useEffect","unsubscribe","getExpenses","month","Date","now","format","console","log","db","collection","where","uid","orderBy","onSnapshot","handleSnapshot","snapshot","docs","map","doc","id","data","getTotal","exp","num","parseInt","amount","expense","index"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,qBAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,SAASC,QAAT,GAAoB;AAAA,4BACSJ,KAAK,CAACK,UAAN,CAAiBJ,eAAjB,CADT;AAAA,QACVK,QADU,qBACVA,QADU;AAAA,QACAC,IADA,qBACAA,IADA;;AAAA,0BAEcP,KAAK,CAACQ,QAAN,CAAe,EAAf,CAFd;AAAA;AAAA,QAEXC,QAFW;AAAA,QAEDC,WAFC;;AAAA,2BAGQV,KAAK,CAACQ,QAAN,CAAe,EAAf,CAHR;AAAA;AAAA,QAGXG,KAHW;AAAA,QAGJC,QAHI,wBAKlB;AACA;AACA;;;AAEAZ,EAAAA,KAAK,CAACa,SAAN,CAAgB,MAAM;AACpB,QAAIN,IAAJ,EAAU;AACR,YAAMO,WAAW,GAAGC,WAAW,EAA/B;AACD;AACF,GAJD,EAIG,CAACR,IAAD,CAJH;;AAMA,WAASQ,WAAT,GAAuB;AAErB;AACA;AACA,UAAMC,KAAK,GAAGb,MAAM,CAACc,IAAI,CAACC,GAAL,EAAD,CAAN,CAAmBC,MAAnB,CAA0B,MAA1B,CAAd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AAGAV,IAAAA,QAAQ,CAACgB,EAAT,CACGC,UADH,CACc,UADd,EAEGC,KAFH,CAES,aAFT,EAEwB,IAFxB,EAE8BjB,IAAI,CAACkB,GAFnC,EAGGD,KAHH,CAGS,cAHT,EAGyB,IAHzB,EAG+B,UAH/B,EAIGE,OAJH,CAIW,SAJX,EAIsB,MAJtB,EAKGC,UALH,CAKcC,cALd;AAMD;;AAED,WAASA,cAAT,CAAwBC,QAAxB,EAAkC;AAChC,UAAMpB,QAAQ,GAAGoB,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkBC,GAAG,IAAI;AACxC;AAASC,QAAAA,EAAE,EAAED,GAAG,CAACC;AAAjB,SAAwBD,GAAG,CAACE,IAAJ,EAAxB;AACD,KAFgB,CAAjB;AAGAxB,IAAAA,WAAW,CAACD,QAAD,CAAX;AACA0B,IAAAA,QAAQ,CAAC1B,QAAD,CAAR;AACD,GArCiB,CAuClB;;;AACA,WAAS0B,QAAT,CAAkB1B,QAAlB,EAA4B;AAC1B,QAAIE,KAAK,GAAG,CAAZ;AACAF,IAAAA,QAAQ,CAACsB,GAAT,CAAcK,GAAD,IAAS;AACpB,YAAMC,GAAG,GAAGC,QAAQ,CAACF,GAAG,CAACG,MAAL,CAApB;AACA5B,MAAAA,KAAK,IAAI0B,GAAT;AACD,KAHD;AAIAzB,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACD;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAH,OAAkBA,KAAlB,CADF,EAEE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,QAAQ,CAACsB,GAAT,CAAa,CAACS,OAAD,EAAUC,KAAV,KACZ,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAED,OAAO,CAACP,EAAtB;AAA0B,IAAA,OAAO,EAAEO,OAAnC;AAA4C,IAAA,KAAK,EAAEC,KAAK,GAAG,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CAFF,CADF;AAUD;;AAED,eAAerC,QAAf","sourcesContent":["import React from 'react'\nimport FirebaseContext from '../firebase/context'\nimport Expense from './Expense'\nimport moment from 'moment'\n\nfunction Expenses() {\n  const { firebase, user } = React.useContext(FirebaseContext)\n  const [expenses, setExpenses] = React.useState([])\n  const [total, setTotal] = React.useState([])\n\n  //use effect hook has its dependency, which is like the didComponentUpdate() lifecycle. so basically, it's dependency is the 'user' variable\n  //this variable first has a state of null, so therefore, we only execute the function / unsubscribe if use is not null (is present)\n  //pretty cool! learned something for sure here...\n\n  React.useEffect(() => {\n    if (user) {\n      const unsubscribe = getExpenses()\n    }\n  }, [user])\n\n  function getExpenses() {\n\n    //config\n    //get current month\n    const month = moment(Date.now()).format('MMMM')\n    console.log(month)\n\n\n    firebase.db\n      .collection('expenses')\n      .where(\"postedBy.id\", \"==\", user.uid)\n      .where(\"monthCreated\", \"==\", \"November\")\n      .orderBy('created', 'desc')\n      .onSnapshot(handleSnapshot)\n  }\n\n  function handleSnapshot(snapshot) {\n    const expenses = snapshot.docs.map(doc => {\n      return { id: doc.id, ...doc.data() }\n    })\n    setExpenses(expenses)\n    getTotal(expenses)\n  }\n\n  //haha, it's not very pretty, but it works!\n  function getTotal(expenses) {\n    let total = 0\n    expenses.map((exp) => {\n      const num = parseInt(exp.amount)\n      total += num\n    })\n    setTotal(total)\n  }\n\n  return (\n    <div>\n      <p><b>total:</b> {total}</p>\n      <div className=\"expenses-list\">\n        {expenses.map((expense, index) => (\n          <Expense key={expense.id} expense={expense} index={index + 1} />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Expenses\n"]},"metadata":{},"sourceType":"module"}