{"ast":null,"code":"import _objectSpread from \"/Users/tristangruener/Desktop/trstn/dev/cashflow_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/tristangruener/Desktop/trstn/dev/cashflow_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tristangruener/Desktop/trstn/dev/cashflow_app/src/components/Expenses.js\";\nimport React from 'react';\nimport FirebaseContext from '../firebase/context'; // import Expense from './Expense'\n\nimport ExpenseList from './ExpenseList';\nimport moment from 'moment';\n\nfunction Expenses() {\n  const _React$useContext = React.useContext(FirebaseContext),\n        firebase = _React$useContext.firebase,\n        user = _React$useContext.user;\n\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        expenses = _React$useState2[0],\n        setExpenses = _React$useState2[1];\n\n  const _React$useState3 = React.useState([]),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        total = _React$useState4[0],\n        setTotal = _React$useState4[1];\n\n  const _React$useState5 = React.useState(''),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        month = _React$useState6[0],\n        setMonth = _React$useState6[1];\n\n  const _React$useState7 = React.useState('1999'),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        year = _React$useState8[0],\n        setYear = _React$useState8[1];\n\n  React.useEffect(() => {\n    if (user) {\n      const unsubscribe = getExpenses();\n      console.log('i ran');\n    }\n  }, [user]);\n\n  function getExpenses() {\n    const month = moment(Date.now()).format('MMMM');\n    const year = moment(Date.now()).format('YYYY');\n    setMonth(month);\n    setYear(year);\n    firebase.db.collection('expenses').where(\"postedBy.id\", \"==\", user.uid).where(\"monthCreated\", \"==\", month).where(\"yearCreated\", \"==\", year).orderBy('created', 'desc').onSnapshot(handleSnapshot);\n  }\n\n  function formatNumber(num) {\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n  }\n\n  function handleSnapshot(snapshot) {\n    const expenses = snapshot.docs.map(doc => {\n      return _objectSpread({\n        id: doc.id\n      }, doc.data());\n    });\n    setExpenses(expenses);\n    getTotal(expenses);\n  }\n\n  function getTotal(expenses) {\n    let total = 0;\n    expenses.map(exp => {\n      const expense = parseFloat(exp.amount);\n      total += expense;\n    });\n    setTotal(total.toFixed(2).toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,'));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"expenses-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"has-text-grey\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, month, \" \", year), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, month, \" total spending: \", React.createElement(\"span\", {\n    className: \"has-text-success\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"$\", total))), React.createElement(ExpenseList, {\n    expenses: expenses,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }));\n}\n\nexport default Expenses;","map":{"version":3,"sources":["/Users/tristangruener/Desktop/trstn/dev/cashflow_app/src/components/Expenses.js"],"names":["React","FirebaseContext","ExpenseList","moment","Expenses","useContext","firebase","user","useState","expenses","setExpenses","total","setTotal","month","setMonth","year","setYear","useEffect","unsubscribe","getExpenses","console","log","Date","now","format","db","collection","where","uid","orderBy","onSnapshot","handleSnapshot","formatNumber","num","toString","replace","snapshot","docs","map","doc","id","data","getTotal","exp","expense","parseFloat","amount","toFixed"],"mappings":"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","sourcesContent":["import React from 'react'\nimport FirebaseContext from '../firebase/context'\n// import Expense from './Expense'\nimport ExpenseList from './ExpenseList'\nimport moment from 'moment'\n\nfunction Expenses() {\n  const { firebase, user } = React.useContext(FirebaseContext)\n  const [expenses, setExpenses] = React.useState([])\n  const [total, setTotal] = React.useState([])\n  const [month, setMonth] = React.useState('')\n  const [year, setYear] = React.useState('1999')\n\n  React.useEffect(() => {\n    if (user) {\n      const unsubscribe = getExpenses()\n      console.log('i ran')\n    }\n  }, [user])\n\n  function getExpenses() {\n\n    const month = moment(Date.now()).format('MMMM')\n    const year = moment(Date.now()).format('YYYY')\n\n    setMonth(month)\n    setYear(year)\n\n    firebase.db\n      .collection('expenses')\n      .where(\"postedBy.id\", \"==\", user.uid)\n      .where(\"monthCreated\", \"==\", month)\n      .where(\"yearCreated\", \"==\", year)\n      .orderBy('created', 'desc')\n      .onSnapshot(handleSnapshot)\n  }\n\n  function formatNumber(num) {\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n  }\n\n  function handleSnapshot(snapshot) {\n    const expenses = snapshot.docs.map(doc => {\n      return { id: doc.id, ...doc.data() }\n    })\n    setExpenses(expenses)\n    getTotal(expenses)\n  }\n\n  function getTotal(expenses) {\n    let total = 0\n    expenses.map((exp) => {\n      const expense = parseFloat(exp.amount)\n      total += expense\n    })\n\n    setTotal(total.toFixed(2).toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,'))\n  }\n\n  return (\n    <div className=\"expenses-list\">\n      <h3 className=\"has-text-grey\">{month} {year}</h3>\n      <p>{month} total spending: <span className=\"has-text-success\"><b>${total}</b></span></p>\n      <ExpenseList expenses={expenses}/>\n    </div>\n  )\n}\n\nexport default Expenses\n"]},"metadata":{},"sourceType":"module"}