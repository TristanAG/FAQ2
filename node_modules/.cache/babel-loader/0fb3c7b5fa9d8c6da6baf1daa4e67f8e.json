{"ast":null,"code":"import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport firebaseConfig from './config';\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(firebaseConfig);\n    this.auth = app.auth();\n    this.db = app.firestore();\n  }\n\n  register(name, email, password) {\n    const newUser = this.auth.createUserWithEmailAndPassword(email, password).then(() => {\n      alert(newUser); // newUser.user.updateProfile({\n      //      displayName: name\n      // })\n      // return newUser.user.updateProfile({\n      //   displayName: name\n      // })\n    }); //so ok here is where I probably want to create a new method called like setUserPrefs()\n    // this.setupUser(newUser)\n    // this.setUserPrefs(newUser.uid)\n    // return await newUser.user.updateProfile({\n    //   displayName: name\n    // })\n  } //what does this actually do?\n  //oh, it returns the displayName from the user object to render on screen when they log in\n  //not sure if it works perfectly.\n\n\n  setupUser(user) {\n    return this.db.collection('expenses').doc(user.uid).set({\n      name: user.displayName\n    });\n  }\n\n  setUserPrefs(uid) {\n    console.log('in set user prefs');\n    console.log(uid);\n  }\n\n  async login(email, password) {\n    return await this.auth.signInWithEmailAndPassword(email, password);\n  }\n\n  async logout() {\n    await this.auth.signOut();\n  }\n\n  async resetPassword(email) {\n    await this.auth.sendPasswordResetEmail(email);\n  }\n\n}\n\nconst firebase = new Firebase();\nexport default firebase;","map":{"version":3,"sources":["/Users/tristangruener/Desktop/trstn/dev/cashflow_app/src/firebase/firebase.js"],"names":["app","firebaseConfig","Firebase","constructor","initializeApp","auth","db","firestore","register","name","email","password","newUser","createUserWithEmailAndPassword","then","alert","setupUser","user","collection","doc","uid","set","displayName","setUserPrefs","console","log","login","signInWithEmailAndPassword","logout","signOut","resetPassword","sendPasswordResetEmail","firebase"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AAEA,OAAOC,cAAP,MAA2B,UAA3B;;AAEA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,GAAG;AACZH,IAAAA,GAAG,CAACI,aAAJ,CAAkBH,cAAlB;AACA,SAAKI,IAAL,GAAYL,GAAG,CAACK,IAAJ,EAAZ;AACA,SAAKC,EAAL,GAAUN,GAAG,CAACO,SAAJ,EAAV;AACD;;AAEDC,EAAAA,QAAQ,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,EAAwB;AAC9B,UAAMC,OAAO,GAAG,KAAKP,IAAL,CAAUQ,8BAAV,CACdH,KADc,EAEdC,QAFc,EAGdG,IAHc,CAGT,MAAM;AACXC,MAAAA,KAAK,CAACH,OAAD,CAAL,CADW,CAGX;AACA;AACA;AACA;AACA;AACA;AACD,KAZe,CAAhB,CAD8B,CAe9B;AAEA;AACA;AACA;AACA;AACA;AACD,GA7BY,CA+Bb;AACA;AACA;;;AACAI,EAAAA,SAAS,CAACC,IAAD,EAAO;AACd,WAAO,KAAKX,EAAL,CAAQY,UAAR,CAAmB,UAAnB,EAA+BC,GAA/B,CAAmCF,IAAI,CAACG,GAAxC,EAA6CC,GAA7C,CAAiD;AACtDZ,MAAAA,IAAI,EAAEQ,IAAI,CAACK;AAD2C,KAAjD,CAAP;AAGD;;AAEDC,EAAAA,YAAY,CAACH,GAAD,EAAM;AAChBI,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACD;;AAED,QAAMM,KAAN,CAAYhB,KAAZ,EAAmBC,QAAnB,EAA6B;AAC3B,WAAO,MAAM,KAAKN,IAAL,CAAUsB,0BAAV,CAAqCjB,KAArC,EAA4CC,QAA5C,CAAb;AACD;;AAED,QAAMiB,MAAN,GAAe;AACb,UAAM,KAAKvB,IAAL,CAAUwB,OAAV,EAAN;AACD;;AAED,QAAMC,aAAN,CAAoBpB,KAApB,EAA2B;AACzB,UAAM,KAAKL,IAAL,CAAU0B,sBAAV,CAAiCrB,KAAjC,CAAN;AACD;;AAvDY;;AA0Df,MAAMsB,QAAQ,GAAG,IAAI9B,QAAJ,EAAjB;AACA,eAAe8B,QAAf","sourcesContent":["import app from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\n\nimport firebaseConfig from './config'\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(firebaseConfig);\n    this.auth = app.auth()\n    this.db = app.firestore()\n  }\n\n  register(name, email, password) {\n    const newUser = this.auth.createUserWithEmailAndPassword(\n      email,\n      password\n    ).then(() => {\n      alert(newUser)\n\n      // newUser.user.updateProfile({\n      //      displayName: name\n      // })\n      // return newUser.user.updateProfile({\n      //   displayName: name\n      // })\n    })\n\n    //so ok here is where I probably want to create a new method called like setUserPrefs()\n\n    // this.setupUser(newUser)\n    // this.setUserPrefs(newUser.uid)\n    // return await newUser.user.updateProfile({\n    //   displayName: name\n    // })\n  }\n\n  //what does this actually do?\n  //oh, it returns the displayName from the user object to render on screen when they log in\n  //not sure if it works perfectly.\n  setupUser(user) {\n    return this.db.collection('expenses').doc(user.uid).set({\n      name: user.displayName\n    })\n  }\n\n  setUserPrefs(uid) {\n    console.log('in set user prefs')\n    console.log(uid)\n  }\n\n  async login(email, password) {\n    return await this.auth.signInWithEmailAndPassword(email, password)\n  }\n\n  async logout() {\n    await this.auth.signOut()\n  }\n\n  async resetPassword(email) {\n    await this.auth.sendPasswordResetEmail(email)\n  }\n}\n\nconst firebase = new Firebase()\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}