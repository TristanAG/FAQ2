{"ast":null,"code":"import _slicedToArray from \"/Users/tristangruener/Desktop/trstn/dev/cashflow_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tristangruener/Desktop/trstn/dev/cashflow_app/src/components/Expenses.js\";\nimport React from 'react';\nimport FirebaseContext from '../firebase/context';\nimport Expense from './Expense';\n\nfunction Expenses() {\n  const _React$useContext = React.useContext(FirebaseContext),\n        firebase = _React$useContext.firebase,\n        user = _React$useContext.user;\n\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        expenses = _React$useState2[0],\n        setExpenses = _React$useState2[1];\n\n  console.log('hello'); //something about this empty array as a dependency lets it hook into the\n  //onMount or soemthing?\n\n  React.useEffect(() => {\n    const unsubscribe = getExpenses();\n  }, []);\n\n  function getExpenses() {\n    // firebase.db\n    //   .collection('expenses')\n    //   .orderBy('created', 'desc')\n    //   .onSnapshot(handleSnapshot)\n    // console.log(user && user.uid)\n    console.log('hey');\n    user && firebase.db.collection('expenses').doc(user.uid).get().then(snapshot => {\n      console.log(snapshot);\n    }); // firebase.db.collection(`expensesNew/${user}/expense/`).onSnapshot(handleSnapshot)\n    // firebase.db.collection('expensesNew').doc(user.uid).get().then((snapshot) => {\n    //   // console.log(snapshot.docs)\n    //   snapshot.docs.forEach(doc => {\n    //     console.log(doc.data)\n    //   })\n    // })\n  }\n\n  function handleSnapshot(snapshot) {\n    // const expenses = snapshot.docs.map(doc => {\n    //   return { id: doc.id, ...doc.data() }\n    // })\n    // setExpenses(expenses)\n    console.log(snapshot);\n  } //ok, so can i determine who the logged in user is here? of course i can\n  //how do i do that\n  // console.log(user && user.uid)\n  //so i think i can get all expenses by user id... from the snapshot above\n  //instead of handling all, i can just\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"expenses-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, expenses.map((expense, index) => React.createElement(Expense, {\n    key: expense.id,\n    expense: expense,\n    index: index + 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }))));\n}\n\nexport default Expenses;","map":{"version":3,"sources":["/Users/tristangruener/Desktop/trstn/dev/cashflow_app/src/components/Expenses.js"],"names":["React","FirebaseContext","Expense","Expenses","useContext","firebase","user","useState","expenses","setExpenses","console","log","useEffect","unsubscribe","getExpenses","db","collection","doc","uid","get","then","snapshot","handleSnapshot","map","expense","index","id"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,qBAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAGA,SAASC,QAAT,GAAoB;AAAA,4BACSH,KAAK,CAACI,UAAN,CAAiBH,eAAjB,CADT;AAAA,QACVI,QADU,qBACVA,QADU;AAAA,QACAC,IADA,qBACAA,IADA;;AAAA,0BAEcN,KAAK,CAACO,QAAN,CAAe,EAAf,CAFd;AAAA;AAAA,QAEXC,QAFW;AAAA,QAEDC,WAFC;;AAIlBC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAJkB,CAKlB;AACA;;AACAX,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,UAAMC,WAAW,GAAGC,WAAW,EAA/B;AACD,GAFD,EAEG,EAFH;;AAIA,WAASA,WAAT,GAAuB;AACrB;AACA;AACA;AACA;AAEA;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAL,IAAAA,IAAI,IAAID,QAAQ,CAACU,EAAT,CAAYC,UAAZ,CAAuB,UAAvB,EAAmCC,GAAnC,CAAuCX,IAAI,CAACY,GAA5C,EAAiDC,GAAjD,GAAuDC,IAAvD,CAA6DC,QAAD,IAAc;AAChFX,MAAAA,OAAO,CAACC,GAAR,CAAYU,QAAZ;AACD,KAFO,CAAR,CARqB,CAYrB;AACA;AACA;AACA;AACA;AACA;AACA;AAID;;AAED,WAASC,cAAT,CAAwBD,QAAxB,EAAkC;AAChC;AACA;AACA;AACA;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAYU,QAAZ;AACD,GAzCiB,CA2ClB;AACA;AACA;AACA;AACA;;;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGb,QAAQ,CAACe,GAAT,CAAa,CAACC,OAAD,EAAUC,KAAV,KACZ,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAED,OAAO,CAACE,EAAtB;AAA0B,IAAA,OAAO,EAAEF,OAAnC;AAA4C,IAAA,KAAK,EAAEC,KAAK,GAAG,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CAFJ,CADF;AAWD;;AAED,eAAetB,QAAf","sourcesContent":["import React from 'react'\nimport FirebaseContext from '../firebase/context'\nimport Expense from './Expense'\n\n\nfunction Expenses() {\n  const { firebase, user } = React.useContext(FirebaseContext)\n  const [expenses, setExpenses] = React.useState([])\n\n  console.log('hello')\n  //something about this empty array as a dependency lets it hook into the\n  //onMount or soemthing?\n  React.useEffect(() => {\n    const unsubscribe = getExpenses()\n  }, [])\n\n  function getExpenses() {\n    // firebase.db\n    //   .collection('expenses')\n    //   .orderBy('created', 'desc')\n    //   .onSnapshot(handleSnapshot)\n\n    // console.log(user && user.uid)\n    console.log('hey')\n    user && firebase.db.collection('expenses').doc(user.uid).get().then((snapshot) => {\n      console.log(snapshot)\n    })\n\n    // firebase.db.collection(`expensesNew/${user}/expense/`).onSnapshot(handleSnapshot)\n    // firebase.db.collection('expensesNew').doc(user.uid).get().then((snapshot) => {\n    //   // console.log(snapshot.docs)\n    //   snapshot.docs.forEach(doc => {\n    //     console.log(doc.data)\n    //   })\n    // })\n\n\n\n  }\n\n  function handleSnapshot(snapshot) {\n    // const expenses = snapshot.docs.map(doc => {\n    //   return { id: doc.id, ...doc.data() }\n    // })\n    // setExpenses(expenses)\n    console.log(snapshot)\n  }\n\n  //ok, so can i determine who the logged in user is here? of course i can\n  //how do i do that\n  // console.log(user && user.uid)\n  //so i think i can get all expenses by user id... from the snapshot above\n  //instead of handling all, i can just\n\n  return (\n    <div>\n      {/* {postedByAuthUser && */}\n        <div className=\"expenses-list\">\n          {expenses.map((expense, index) => (\n            <Expense key={expense.id} expense={expense} index={index + 1} />\n          ))}\n        </div>\n      {/* } */}\n    </div>\n  )\n}\n\nexport default Expenses\n"]},"metadata":{},"sourceType":"module"}