{"ast":null,"code":"import _objectSpread from \"/Users/tristangruener/Desktop/trstn/dev/cashflow_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/tristangruener/Desktop/trstn/dev/cashflow_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tristangruener/Desktop/trstn/dev/cashflow_app/src/components/Expenses.js\";\nimport React from 'react';\nimport FirebaseContext from '../firebase/context';\nimport Expense from './Expense';\nimport moment from 'moment';\n\nfunction Expenses() {\n  const _React$useContext = React.useContext(FirebaseContext),\n        firebase = _React$useContext.firebase,\n        user = _React$useContext.user;\n\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        expenses = _React$useState2[0],\n        setExpenses = _React$useState2[1];\n\n  const _React$useState3 = React.useState([]),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        total = _React$useState4[0],\n        setTotal = _React$useState4[1];\n\n  const _React$useState5 = React.useState(''),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        month = _React$useState6[0],\n        setMonth = _React$useState6[1];\n\n  const _React$useState7 = React.useState('1999'),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        year = _React$useState8[0],\n        setYear = _React$useState8[1]; //use effect hook has its dependency, which is like the didComponentUpdate() lifecycle. so basically, it's dependency is the 'user' variable\n  //this variable first has a state of null, so therefore, we only execute the function / unsubscribe if use is not null (is present)\n  //pretty cool! learned something for sure here...\n\n\n  React.useEffect(() => {\n    if (user) {\n      const unsubscribe = getExpenses();\n    }\n  }, [user]);\n\n  function getExpenses() {\n    //config\n    //get current month\n    const month = moment(Date.now()).format('MMMM');\n    const year = moment(Date.now()).format('YYYY');\n    setMonth(month);\n    setYear(year); //if i want to get everyone in a group, instead of searching for mine personally, i use\n    //a group where clause that somehow has a key connected to the group in question... that's one way\n    //another way is to have multiple where clauses in place for each user (that could be easier...)\n    //it seems that when you set it here, you should also set it up to exist in some Context state for current collection or something\n\n    firebase.db.collection('expenses').where(\"postedBy.id\", \"==\", user.uid).where(\"monthCreated\", \"==\", month).where(\"yearCreated\", \"==\", year).orderBy('created', 'desc').onSnapshot(handleSnapshot);\n  }\n\n  function formatNumber(num) {\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n  }\n\n  function handleSnapshot(snapshot) {\n    const expenses = snapshot.docs.map(doc => {\n      return _objectSpread({\n        id: doc.id\n      }, doc.data());\n    });\n    setExpenses(expenses);\n    getTotal(expenses);\n  } //haha, it's not very pretty, but it works!\n\n\n  function getTotal(expenses) {\n    let total = 0;\n    expenses.map(exp => {\n      const num = parseInt(exp.amount);\n      total += num;\n    });\n    setTotal(total.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,'));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"expenses-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"\\uD83C\\uDF42 \", month, \" \", year, \" Expenses\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"amount spent:\"), \" \", React.createElement(\"span\", {\n    className: \"has-text-success\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"$\", total)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, expenses.map((expense, index) => React.createElement(Expense, {\n    key: expense.id,\n    expense: expense,\n    index: index + 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }))));\n}\n\nexport default Expenses;","map":{"version":3,"sources":["/Users/tristangruener/Desktop/trstn/dev/cashflow_app/src/components/Expenses.js"],"names":["React","FirebaseContext","Expense","moment","Expenses","useContext","firebase","user","useState","expenses","setExpenses","total","setTotal","month","setMonth","year","setYear","useEffect","unsubscribe","getExpenses","Date","now","format","db","collection","where","uid","orderBy","onSnapshot","handleSnapshot","formatNumber","num","toString","replace","snapshot","docs","map","doc","id","data","getTotal","exp","parseInt","amount","expense","index"],"mappings":"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","sourcesContent":["import React from 'react'\nimport FirebaseContext from '../firebase/context'\nimport Expense from './Expense'\nimport moment from 'moment'\n\nfunction Expenses() {\n  const { firebase, user } = React.useContext(FirebaseContext)\n  const [expenses, setExpenses] = React.useState([])\n  const [total, setTotal] = React.useState([])\n  const [month, setMonth] = React.useState('')\n  const [year, setYear] = React.useState('1999')\n\n  //use effect hook has its dependency, which is like the didComponentUpdate() lifecycle. so basically, it's dependency is the 'user' variable\n  //this variable first has a state of null, so therefore, we only execute the function / unsubscribe if use is not null (is present)\n  //pretty cool! learned something for sure here...\n\n  React.useEffect(() => {\n    if (user) {\n      const unsubscribe = getExpenses()\n    }\n  }, [user])\n\n  function getExpenses() {\n\n    //config\n    //get current month\n    const month = moment(Date.now()).format('MMMM')\n    const year = moment(Date.now()).format('YYYY')\n    setMonth(month)\n    setYear(year)\n\n    //if i want to get everyone in a group, instead of searching for mine personally, i use\n    //a group where clause that somehow has a key connected to the group in question... that's one way\n    //another way is to have multiple where clauses in place for each user (that could be easier...)\n      //it seems that when you set it here, you should also set it up to exist in some Context state for current collection or something\n\n    firebase.db\n      .collection('expenses')\n      .where(\"postedBy.id\", \"==\", user.uid)\n      .where(\"monthCreated\", \"==\", month)\n      .where(\"yearCreated\", \"==\", year)\n      .orderBy('created', 'desc')\n      .onSnapshot(handleSnapshot)\n  }\n\n  function formatNumber(num) {\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n  }\n\n  function handleSnapshot(snapshot) {\n    const expenses = snapshot.docs.map(doc => {\n      return { id: doc.id, ...doc.data() }\n    })\n    setExpenses(expenses)\n    getTotal(expenses)\n  }\n\n  //haha, it's not very pretty, but it works!\n  function getTotal(expenses) {\n    let total = 0\n    expenses.map((exp) => {\n      const num = parseInt(exp.amount)\n      total += num\n    })\n    setTotal(total.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,'))\n  }\n\n  return (\n    <div className=\"expenses-list\">\n      <h3>🍂 {month} {year} Expenses</h3>\n      <p><b>amount spent:</b> <span className=\"has-text-success\">${total}</span></p>\n      <div>\n        {expenses.map((expense, index) => (\n          <Expense key={expense.id} expense={expense} index={index + 1} />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Expenses\n"]},"metadata":{},"sourceType":"module"}