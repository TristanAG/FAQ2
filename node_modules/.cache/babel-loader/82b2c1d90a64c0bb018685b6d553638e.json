{"ast":null,"code":"import _slicedToArray from \"/Users/tristangruener/Desktop/trstn/dev/FAQ2/faq2beta/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tristangruener/Desktop/trstn/dev/FAQ2/faq2beta/src/components/auth/ForgotPassword.js\";\nimport React from 'react';\nimport FirebaseContext from '../../firebase/context';\n\nfunction ForgotPassword() {\n  const _React$useContext = React.useContext(FirebaseContext),\n        firebase = _React$useContext.firebase;\n\n  const _React$useState = React.useState(''),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        resetPasswordEmail = _React$useState2[0],\n        setResetPasswordEmail = _React$useState2[1];\n\n  const _React$useState3 = React.useState(false),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        isPasswordReset = _React$useState4[0],\n        setIsPasswordReset = _React$useState4[1];\n\n  const _React$useState5 = React.useState(null),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        passwordResetError = _React$useState6[0],\n        setIsPasswordResetError = _React$useState6[1];\n\n  async function handleResetPassword() {\n    try {\n      await firebase.resetPassword(resetPasswordEmail);\n      setIsPasswordReset(true);\n    } catch (err) {\n      console.error(\"ðŸ’€ ðŸ’€ ðŸ’€ error sending email\", err);\n      setIsPasswordResetError(err.message);\n      setIsPasswordReset(false);\n    }\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"email\",\n    className: \"input\",\n    placeholder: \"provide your account email\",\n    onChange: event => setResetPasswordEmail(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"button\",\n    onClick: handleResetPassword,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Reset Password\")), isPasswordReset && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"check email for password reset link\"), passwordResetError && React.createElement(\"p\", {\n    className: \"has-text-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, passwordResetError));\n}\n\nexport default ForgotPassword;","map":{"version":3,"sources":["/Users/tristangruener/Desktop/trstn/dev/FAQ2/faq2beta/src/components/auth/ForgotPassword.js"],"names":["React","FirebaseContext","ForgotPassword","useContext","firebase","useState","resetPasswordEmail","setResetPasswordEmail","isPasswordReset","setIsPasswordReset","passwordResetError","setIsPasswordResetError","handleResetPassword","resetPassword","err","console","error","message","event","target","value"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,wBAA5B;;AAEA,SAASC,cAAT,GAA0B;AAAA,4BACHF,KAAK,CAACG,UAAN,CAAiBF,eAAjB,CADG;AAAA,QAChBG,QADgB,qBAChBA,QADgB;;AAAA,0BAE4BJ,KAAK,CAACK,QAAN,CAAe,EAAf,CAF5B;AAAA;AAAA,QAEjBC,kBAFiB;AAAA,QAEGC,qBAFH;;AAAA,2BAGsBP,KAAK,CAACK,QAAN,CAAe,KAAf,CAHtB;AAAA;AAAA,QAGjBG,eAHiB;AAAA,QAGAC,kBAHA;;AAAA,2BAI8BT,KAAK,CAACK,QAAN,CAAe,IAAf,CAJ9B;AAAA;AAAA,QAIjBK,kBAJiB;AAAA,QAIGC,uBAJH;;AAMxB,iBAAeC,mBAAf,GAAqC;AACnC,QAAI;AACF,YAAMR,QAAQ,CAACS,aAAT,CAAuBP,kBAAvB,CAAN;AACAG,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,KAHD,CAGE,OAAOK,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAc,8BAAd,EAA8CF,GAA9C;AACAH,MAAAA,uBAAuB,CAACG,GAAG,CAACG,OAAL,CAAvB;AACAR,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD;AACF;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,SAAS,EAAC,OAFZ;AAGE,IAAA,WAAW,EAAC,4BAHd;AAIE,IAAA,QAAQ,EAAES,KAAK,IAAIX,qBAAqB,CAACW,KAAK,CAACC,MAAN,CAAaC,KAAd,CAJ1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAA2B,IAAA,OAAO,EAAER,mBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CARF,EAaGJ,eAAe,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAbtB,EAcGE,kBAAkB,IAAI;AAAG,IAAA,SAAS,EAAC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCA,kBAAhC,CAdzB,CADF;AAoBD;;AAGD,eAAeR,cAAf","sourcesContent":["import React from 'react'\nimport FirebaseContext from '../../firebase/context'\n\nfunction ForgotPassword() {\n  const { firebase } = React.useContext(FirebaseContext)\n  const [resetPasswordEmail, setResetPasswordEmail] = React.useState('')\n  const [isPasswordReset, setIsPasswordReset] = React.useState(false)\n  const [passwordResetError, setIsPasswordResetError] = React.useState(null)\n\n  async function handleResetPassword() {\n    try {\n      await firebase.resetPassword(resetPasswordEmail)\n      setIsPasswordReset(true)\n    } catch (err) {\n      console.error(\"ðŸ’€ ðŸ’€ ðŸ’€ error sending email\", err )\n      setIsPasswordResetError(err.message)\n      setIsPasswordReset(false)\n    }\n  }\n\n  return (\n    <div>\n      <input\n        type=\"email\"\n        className=\"input\"\n        placeholder=\"provide your account email\"\n        onChange={event => setResetPasswordEmail(event.target.value)}\n      />\n\n      <div>\n        <button className=\"button\" onClick={handleResetPassword}>\n          Reset Password\n        </button>\n      </div>\n      {isPasswordReset && <p>check email for password reset link</p>}\n      {passwordResetError && <p className=\"has-text-danger\">{passwordResetError}</p>}\n    </div>\n\n  )\n\n}\n\n\nexport default ForgotPassword\n"]},"metadata":{},"sourceType":"module"}